import { JSONObject } from "../queryExecutionContext";
import { PartitionKeyDefinition } from "../documents";
export declare type Operation = CreateOperation | UpsertOperation | ReadOperation | DeleteOperation | ReplaceOperation;
export interface Batch {
    min: string;
    max: string;
    rangeId: string;
    indexes: number[];
    operations: Operation[];
}
export interface OperationResponse {
    statusCode: number;
    requestCharge: number;
    eTag?: string;
    resourceBody?: JSONObject;
}
export declare function isKeyInRange(min: string, max: string, key: string): boolean;
export interface OperationBase {
    partitionKey?: string;
    ifMatch?: string;
    ifNoneMatch?: string;
}
export interface OperationInput {
    partitionKey?: string | number | null | {} | undefined;
    ifMatch?: string;
    ifNoneMatch?: string;
    resourceBody?: JSONObject;
}
export declare type OperationWithItem = OperationBase & {
    resourceBody: JSONObject;
};
export declare type CreateOperation = OperationWithItem & {
    operationType: "Create";
};
export declare type UpsertOperation = OperationWithItem & {
    operationType: "Upsert";
};
export declare type ReadOperation = OperationBase & {
    operationType: "Read";
    id: string;
};
export declare type DeleteOperation = OperationBase & {
    operationType: "Delete";
    id: string;
};
export declare type ReplaceOperation = OperationWithItem & {
    operationType: "Replace";
    id: string;
};
export declare function hasResource(operation: Operation): operation is CreateOperation | UpsertOperation | ReplaceOperation;
export declare function getPartitionKeyToHash(operation: Operation, partitionProperty: string): any;
export declare function addPKToOperation(operation: OperationInput, definition: PartitionKeyDefinition): OperationInput;
//# sourceMappingURL=batch.d.ts.map