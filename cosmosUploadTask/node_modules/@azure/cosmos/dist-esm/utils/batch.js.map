{"version":3,"file":"batch.js","sourceRoot":"","sources":["../../src/utils/batch.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAyB7D,MAAM,UAAU,YAAY,CAAC,GAAW,EAAE,GAAW,EAAE,GAAW;IAChE,MAAM,mBAAmB,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxD,MAAM,WAAW,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/C,OAAO,mBAAmB,IAAI,WAAW,CAAC;AAC5C,CAAC;AA0CD,MAAM,UAAU,WAAW,CACzB,SAAoB;IAEpB,OAAQ,SAA+B,CAAC,YAAY,KAAK,SAAS,CAAC;AACrE,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,SAAoB,EAAE,iBAAyB;IACnF,MAAM,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;QACtC,CAAC,CAAE,SAAS,CAAC,YAAoB,CAAC,iBAAiB,CAAC;QACpD,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;IACtD,mEAAmE;IACnE,yFAAyF;IACzF,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,CAAC,YAAY,KAAK,MAAM,EAAE;QAC3D,OAAO,EAAE,CAAC;KACX;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,SAAyB,EAAE,UAAkC;IAC5F,IAAI,SAAS,CAAC,YAAY,EAAE;QAC1B,MAAM,SAAS,GAAG,mBAAmB,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAC/E,uCAAY,SAAS,KAAE,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAG;KAClE;SAAM,IAAI,SAAS,CAAC,YAAY,EAAE;QACjC,MAAM,EAAE,GAAG,mBAAmB,CAAC,SAAS,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QACnE,uCAAY,SAAS,KAAE,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAG;KAC3D;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { JSONObject } from \"../queryExecutionContext\";\nimport { extractPartitionKey } from \"../extractPartitionKey\";\nimport { PartitionKeyDefinition } from \"../documents\";\n\nexport type Operation =\n  | CreateOperation\n  | UpsertOperation\n  | ReadOperation\n  | DeleteOperation\n  | ReplaceOperation;\n\nexport interface Batch {\n  min: string;\n  max: string;\n  rangeId: string;\n  indexes: number[];\n  operations: Operation[];\n}\n\nexport interface OperationResponse {\n  statusCode: number;\n  requestCharge: number;\n  eTag?: string;\n  resourceBody?: JSONObject;\n}\n\nexport function isKeyInRange(min: string, max: string, key: string) {\n  const isAfterMinInclusive = key.localeCompare(min) >= 0;\n  const isBeforeMax = key.localeCompare(max) < 0;\n  return isAfterMinInclusive && isBeforeMax;\n}\n\nexport interface OperationBase {\n  partitionKey?: string;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n}\n\nexport interface OperationInput {\n  partitionKey?: string | number | null | {} | undefined;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  resourceBody?: JSONObject;\n}\n\nexport type OperationWithItem = OperationBase & {\n  resourceBody: JSONObject;\n};\n\nexport type CreateOperation = OperationWithItem & {\n  operationType: \"Create\";\n};\n\nexport type UpsertOperation = OperationWithItem & {\n  operationType: \"Upsert\";\n};\n\nexport type ReadOperation = OperationBase & {\n  operationType: \"Read\";\n  id: string;\n};\n\nexport type DeleteOperation = OperationBase & {\n  operationType: \"Delete\";\n  id: string;\n};\n\nexport type ReplaceOperation = OperationWithItem & {\n  operationType: \"Replace\";\n  id: string;\n};\n\nexport function hasResource(\n  operation: Operation\n): operation is CreateOperation | UpsertOperation | ReplaceOperation {\n  return (operation as OperationWithItem).resourceBody !== undefined;\n}\n\nexport function getPartitionKeyToHash(operation: Operation, partitionProperty: string) {\n  const toHashKey = hasResource(operation)\n    ? (operation.resourceBody as any)[partitionProperty]\n    : operation.partitionKey.replace(/[\\[\\]\\\"\\']/g, \"\");\n  // We check for empty object since replace will stringify the value\n  // The second check avoids cases where the partitionKey value is actually the string '{}'\n  if (toHashKey === \"{}\" && operation.partitionKey === \"[{}]\") {\n    return {};\n  }\n  return toHashKey;\n}\n\nexport function addPKToOperation(operation: OperationInput, definition: PartitionKeyDefinition) {\n  if (operation.partitionKey) {\n    const extracted = extractPartitionKey(operation, { paths: [\"/partitionKey\"] });\n    return { ...operation, partitionKey: JSON.stringify(extracted) };\n  } else if (operation.resourceBody) {\n    const pk = extractPartitionKey(operation.resourceBody, definition);\n    return { ...operation, partitionKey: JSON.stringify(pk) };\n  }\n  return operation;\n}\n"]}